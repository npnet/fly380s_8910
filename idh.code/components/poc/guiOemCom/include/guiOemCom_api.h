#ifndef _INCLUDE_GUIOemCOM_API_H_
#define _INCLUDE_GUIOemCOM_API_H_

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include "../../gui/lv_include/lv_poc_type.h"
#include "at_engine.h"

OSI_EXTERN_C_BEGIN
;
typedef enum
{
	LVPOCGUIIDTCOM_SIGNAL_START = (1 << 8) - 1,

	LVPOCGUIOEMCOM_SIGNAL_AP_POC_START,

	LVPOCGUIOEMCOM_SIGNAL_AP_POC_IND,
	LVPOCGUIOEMCOM_SIGNAL_AP_POC_REP,

	LVPOCGUIOEMCOM_SIGNAL_OPENPOC_IND,
    LVPOCGUIOEMCOM_SIGNAL_OPENPOC_REP,

	LVPOCGUIOEMCOM_SIGNAL_SETPOC_IND,
    LVPOCGUIOEMCOM_SIGNAL_SETPOC_REP,

    LVPOCGUIOEMCOM_SIGNAL_LOGIN_IND,
    LVPOCGUIOEMCOM_SIGNAL_LOGIN_REP,

    LVPOCGUIOEMCOM_SIGNAL_EXIT_IND,
    LVPOCGUIOEMCOM_SIGNAL_EXIT_REP,

    LVPOCGUIOEMCOM_SIGNAL_SPEAK_START_IND,
    LVPOCGUIOEMCOM_SIGNAL_SPEAK_START_REP,

    LVPOCGUIOEMCOM_SIGNAL_SPEAK_STOP_IND,
    LVPOCGUIOEMCOM_SIGNAL_SPEAK_STOP_REP,

    LVPOCGUIOEMCOM_SIGNAL_LISTEN_START_REP,
    LVPOCGUIOEMCOM_SIGNAL_LISTEN_STOP_REP,
    LVPOCGUIOEMCOM_SIGNAL_LISTEN_SPEAKER_REP,

	LVPOCGUIIDTCOM_SIGNAL_JOIN_GROUP_REP,


    LVPOCGUIIDTCOM_SIGNAL_MIC_IND,
    LVPOCGUIIDTCOM_SIGNAL_MIC_REP,

    LVPOCGUIIDTCOM_SIGNAL_GROUP_LIST_QUERY_IND,
    LVPOCGUIIDTCOM_SIGNAL_GROUP_LIST_QUERY_REP,
    LVPOCGUIIDTCOM_SIGNAL_REGISTER_GET_GROUP_LIST_CB_IND,
    LVPOCGUIIDTCOM_SIGNAL_CANCEL_REGISTER_GET_GROUP_LIST_CB_IND,

    LVPOCGUIIDTCOM_SIGNAL_BIUILD_GROUP_IND,
    LVPOCGUIIDTCOM_SIGNAL_BIUILD_GROUP_REP,
    LVPOCGUIIDTCOM_SIGNAL_REGISTER_BIUILD_GROUP_CB_IND,
    LVPOCGUIIDTCOM_SIGNAL_CANCEL_REGISTER_BIUILD_GROUP_CB_IND,

    LVPOCGUIIDTCOM_SIGNAL_MEMBER_LIST_QUERY_IND,
    LVPOCGUIIDTCOM_SIGNAL_MEMBER_LIST_QUERY_REP,
    LVPOCGUIIDTCOM_SIGNAL_REGISTER_GET_MEMBER_LIST_CB_IND,
    LVPOCGUIIDTCOM_SIGNAL_CANCEL_REGISTER_GET_MEMBER_LIST_CB_IND,

    LVPOCGUIIDTCOM_SIGNAL_SET_CURRENT_GROUP_IND,
    LVPOCGUIIDTCOM_SIGNAL_REGISTER_SET_CURRENT_GROUP_CB_IND,
    LVPOCGUIIDTCOM_SIGNAL_CANCEL_REGISTER_SET_CURRENT_GROUP_CB_IND,

    LVPOCGUIIDTCOM_SIGNAL_MEMBER_INFO_IND,
    LVPOCGUIIDTCOM_SIGNAL_MEMBER_INFO_REP,

    LVPOCGUIIDTCOM_SIGNAL_MEMBER_STATUS_REP,
    LVPOCGUIIDTCOM_SIGNAL_REGISTER_MEMBER_STATUS_CB_REP,
    LVPOCGUIIDTCOM_SIGNAL_CANCEL_REGISTER_MEMBER_STATUS_CB_REP,

    LVPOCGUIIDTCOM_SIGNAL_STOP_PLAY_IND,
    LVPOCGUIIDTCOM_SIGNAL_START_PLAY_IND,

    LVPOCGUIIDTCOM_SIGNAL_STOP_RECORD_IND,
    LVPOCGUIIDTCOM_SIGNAL_START_RECORD_IND,

    LVPOCGUIIDTCOM_SIGNAL_SINGLE_CALL_STATUS_IND,
    LVPOCGUIIDTCOM_SIGNAL_SINGLE_CALL_STATUS_OK_REP,
    LVPOCGUIIDTCOM_SIGNAL_SINGLE_CALL_STATUS_EXIT_REP,

    LVPOCGUIIDTCOM_SIGNAL_GU_STATUS_REP,

    LVPOCGUIIDTCOM_SIGNAL_GROUP_OPERATOR_REP,

    LVPOCGUIIDTCOM_SIGNAL_RELEASE_LISTEN_TIMER_REP,

    LVPOCGUIIDTCOM_SIGNAL_DELAY_IND,

    LVPOCGUIIDTCOM_SIGNAL_GET_MEMBER_LIST_CUR_GROUP,

    LVPOCGUIIDTCOM_SIGNAL_GET_GROUP_LIST_INCLUDE_SELF,

    LVPOCGUIIDTCOM_SIGNAL_GET_LOCK_GROUP_STATUS_IND,

    LVPOCGUIIDTCOM_SIGNAL_LOCK_GROUP_IND,
    LVPOCGUIIDTCOM_SIGNAL_LOCK_GROUP_REP,

    LVPOCGUIIDTCOM_SIGNAL_UNLOCK_GROUP_IND,
    LVPOCGUIIDTCOM_SIGNAL_UNLOCK_GROUP_REP,

    LVPOCGUIIDTCOM_SIGNAL_DELETE_GROUP_IND,
    LVPOCGUIIDTCOM_SIGNAL_DELETE_GROUP_REP,

	LVPOCGUIIDTCOM_SIGNAL_GET_SPEAK_CALL_CASE,

    LVPOCGUIIDTCOM_SIGNAL_END,
} LvPocGuiIdtCom_SignalType_t;

typedef enum{/*登陆状态*/

	LVPOCLEDIDTCOM_SIGNAL_LOGIN_START = 0,

	LVPOCLEDIDTCOM_SIGNAL_LOGIN_FAILED = 1 ,
	LVPOCLEDIDTCOM_SIGNAL_LOGIN_ING = 2 ,
	LVPOCLEDIDTCOM_SIGNAL_LOGIN_SUCCESS = 3 ,
	LVPOCLEDIDTCOM_SIGNAL_LOGIN_EXIT = 4 ,

	LVPOCLEDIDTCOM_SIGNAL_LOGIN_END	,
}LVPOCIDTCOM_LOGIN_STATUS_T;

typedef enum{/*登陆状态*/

	LVPOCOEMCOM_SIGNAL_GROUP_START = 0,

	LVPOCOEMCOM_SIGNAL_GROUP_JOIN = 1 ,
	LVPOCOEMCOM_SIGNAL_GROUP_EXIT = 2 ,

	LVPOCOEMCOM_SIGNAL_GROUP_END	,
}LVPOCOEMCOM_GROUP_STATUS_T;

//OPT SEND CODE
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_OPENPOC 			  "000500"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_SETPARAM 			  "010000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_GETPARAM 			  "020000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_LOGIN    			  "030000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_LOGOUT   			  "040000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_ADDLISTENGROUP      "070000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_CANNELLISTENGROUP   "080000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_STARTSPEAK 		  "0B0000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_STOPSPEAK  		  "0C0000"
#define LVPOCPOCOEMCOM_SIGNAL_OPTCODE_SETVOLUM   		  "250000"
#define LVPOCPOCOEMCOM_SIGNAL_OPTCODE_OPEN_LOG 			  "7E000001"

#define LVPOCPOCOEMCOM_SIGNAL_OPTCODE_ACCOUT 			  "66747468"//ftth---账号
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_END        		  "00"

//OPT ACK CODE
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_POCSTARTED_ACK 		  "ff00"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_OPENPOC_ACK             "00000500"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_SETPARAM_ACK   		  "01000000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_GETPARAM_ACK   		  "02000000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_LOGIN_ACK      		  "030000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_LOGOUT_ACK     		  "040000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_LOGIN_ACK      		  "030000"

#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_NOLOGIN_ACK             "8200"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_LOGINING_ACK            "8201"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_LOGIN_SUCCESS_ACK       "8202"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_LOGIN_CANCELLATION_ACK  "8203"

#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_GROUP_JNIO_ACK  		  "8600"

#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_ADDLISTENGROUP_ACK      "070000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_CANNELLISTENGROUP_ACK   "080000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_STARTSPEAK_ACK          "0b000000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_STOPSPEAK_ACK 		  "0c000000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_STARTLISTEN_ACK 		  "8b0001"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_STOPLISTEN_ACK 		  "8b0000"
#define LVPOCPOCOEMCOM_SIGNAL_OPTCODE_SETVOLUM_ACK    		  "250000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_NETWORK_CONNECTED_ACK   "970001"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_NETWORK_NOT_CONNECT_ACK "970000"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_VOICECALLSTART_ACK      "a301"
#define	LVPOCPOCOEMCOM_SIGNAL_OPTCODE_VOICECALLEND_ACK        "a300"

//SET POC FUNC
//A:TTS_FUNC B:NOTIFY_FUNC C:OFFLINEPLAY_FUNC
//1:open 0:close
#define OEM_FUNC_OPEN  "01"
#define OEM_FUNC_CLOSE "00"
#define OEM_DTOS(x)    #x
#define LVPOCPOCOEMCOM_SIGNAL_OPENPOC(A,B,C,D)  A##0##B##0##C##0##D

#if 1/*确信*/
typedef struct
{
	int status;
	unsigned short cause;
} LvPocGuiIdtCom_login_t;

typedef struct
{
	int opt;
	void *group_info;
	void (*cb)(lv_poc_group_oprator_type opt);
} LvPocGuiIdtCom_lock_group_t;

typedef struct
{
	void *group_info;
	void (*cb)(int result_type);
} LvPocGuiIdtCom_delete_group_t;

void lvPocGuiIdtCom_Init(void);

bool lvPocGuiIdtCom_Msg(LvPocGuiIdtCom_SignalType_t signal, void * ctx);

void lvPocGuiIdtCom_log(void);

bool lvPocGuiIdtCom_get_status(void);

void *lvPocGuiIdtCom_get_self_info(void);

void *lvPocGuiIdtCom_get_current_group_info(void);

bool lvPocGuiIdtCom_get_listen_status(void);

void *lvPocGuiIdtCom_get_current_lock_group(void);

bool lvPocGuiIdtCase_Msg(LvPocGuiIdtCom_SignalType_t signal, void * ctx, void * cause_str);
#endif

/**********************EXTERN**********************/
extern atCmdEngine_t *ap_Oem_engine;

void lvPocGuiOemCom_Init(void);

bool lvPocGuiOemCom_Msg(LvPocGuiIdtCom_SignalType_t signal, void * ctx);

bool lvPocGuiOemCom_MessageQueue(osiMessageQueue_t *mq, const void *msg);

int OEM_SendUart(char *uf,int len);

void OEM_TTS_Stop();

int OEM_TTS_Spk(char* atxt);

void OemData_StrToStrHex(char *pszDest, char *pbSrc, int nLen);

/*
	  name : persist_ssl_hashKeyConvert
	 param : none
	author : wangls
  describe : 字符串->(char)16进制->(wchar)16进制
	  date : 2020-09-14
*/
unsigned int persist_ssl_hashKeyConvert(char *pUserInput, wchar_t *pKeyArray);

/*
	  name : persist_ssl_hashKeyConvert
	 param : none
	author : wangls
  describe : unicode to gb2312
	  date : 2020-09-14
*/
void Unicode_To_Gb2312_Convert(char *pUserInput, char *pUserOutput);

/*
	  name : unicode_to_utf
	 param : none
	author : wangls
  describe : unicode to utf8
	  date : 2020-09-14
*/
int
unicode_to_utf(unsigned long unicode, unsigned char *utf);

/*
	  name : Oem_Unicode_To_Utf8_Convert
	 param : none
	author : wangls
  describe : oem unicode to utf8
	  date : 2020-09-14
*/
void Oem_Unicode_To_Utf8_Convert(char *pUserInput, char *pUserOutput);

OSI_EXTERN_C_END

#endif
